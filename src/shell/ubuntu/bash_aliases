#!/bin/bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Lock screen.

alias afk="gnome-screensaver-command --lock"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Shorter commands for the `Advanced Packaging Tool`

alias apti="sudo apt-get install"
alias aptr="sudo apt-get remove"
alias apts="sudo apt-cache search"
alias aptu="sudo apt-get update \
                && sudo apt-get upgrade"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Empty trash.

alias empty-trash="rm -rf ~/.local/share/Trash/files/*"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Hide/Show desktop icons.

alias hide-desktop-icons="gsettings set org.gnome.desktop.background show-desktop-icons false"
alias show-desktop-icons="gsettings set org.gnome.desktop.background show-desktop-icons true"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Open from the terminal.

alias o="xdg-open"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Update applications and CLTs.

alias u="sudo apt-get update \
            && sudo apt-get upgrade -y \
            && sudo snap refresh"
alias up="sudo apt update \
            && sudo apt upgrade -y"

function dnames-fn {
	for ID in `docker ps | awk '{print $1}' | grep -v 'CONTAINER'`
	do
    	docker inspect $ID | grep Name | head -1 | awk '{print $2}' | sed 's/,//g' | sed 's%/%%g' | sed 's/"//g'
	done
}
function docker-start {

if [ -n "$(docker ps -a -q -f id=$1)" ]; then
    if [ -n "$(docker ps -aq -f status=exited -f id=$1)" ]; then
        # cleanup
        echo 'status exited'
    else
        echo $1;
            [ ! -z "$1" ] && docker start "$1" || echo docker start $(docker ps -qa)
    fi
else
    if [ ! -z "$1" ]; then
        echo "Container are not exists: ${1}";
    else
        docker start $(docker ps -qa)
    fi
fi

}
function docker-restart {
    if [ -n "$(docker ps -a -q -f id=$1)" ]; then
        if [ -n "$(docker ps -aq -f status=exited -f id=$1)" ]; then
            # cleanup
            echo 'status exited'
        else
            echo $1;
                [ ! -z "$1" ] && docker restart "$1" || echo docker restart $(docker ps -qa)
        fi
    else
        if [ ! -z "$1" ]; then
            echo "Container are not exists: ${1}";
        else
            docker restart $(docker ps -qa)
        fi
    fi
}
function dockerps() {
    docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Names}}\t{{.Status}}"
}
function dexec {
        if [ -n "$(docker ps -a -q -f id=$1)" ]; then
            if [ -n "$(docker ps -aq -f status=exited -f id=$1)" ]; then
                # cleanup
                echo 'status exited'
            else
                echo $1;
                    [ ! -z "$1" ] && docker exec -it "$1" sh
            fi
        fi

}
function kill-any() {
    kill -9 $(pgrep -f $1)
}


# Add this to your ~/.bashrc or ~/.bash_aliases
vpn() {
    if ! op account get >/dev/null 2>&1; then
        echo "Signing in to 1Password..."
        eval $(op signin)
    fi
    local temp_config="/tmp/temp_vpn_config_$$.ovpn"
    local vault="Sotiris" # Change this to your vault name
    local item_name="IntraClear VPN" # Change this to your item name
    local log_file="/tmp/openvpn_log_$$.log"

    # Create temp files and clean them up on exit
    trap "rm -f $temp_config $log_file" EXIT

    case "$1" in
        "connect"|"start")
            # Get VPN config from 1Password and save to temp file
            op read "op://$vault/$item_name/notesPlain" > "$temp_config"
            chmod 600 "$temp_config"

            # Start VPN connection with OpenVPN2
            sudo openvpn --config "$temp_config" --daemon --log "$log_file"
            echo "OpenVPN connection started. Log file: $log_file"
            ;;
        "disconnect"|"stop")
            # Find and kill OpenVPN process
            if pgrep -x "openvpn" > /dev/null; then
                sudo killall openvpn
                echo "OpenVPN connection stopped"
            else
                echo "No OpenVPN connection found"
            fi
            ;;
        "restart")
            # Disconnect if connected
            if pgrep -x "openvpn" > /dev/null; then
                sudo killall openvpn
                echo "Stopping current OpenVPN connection"
            fi

            # Get VPN config from 1Password and save to temp file
            op read "op://$vault/$item_name/notesPlain" > "$temp_config"
            chmod 600 "$temp_config"

            # Start VPN connection with OpenVPN2
            sudo openvpn --config "$temp_config" --daemon --log "$log_file"
            echo "OpenVPN connection restarted. Log file: $log_file"
            ;;
        "status")
            if pgrep -x "openvpn" > /dev/null; then
                echo "OpenVPN is running"
                # Show interface information if tun0 exists
                ip addr show tun0 2>/dev/null || echo "VPN interface not found"
            else
                echo "OpenVPN is not running"
            fi
            ;;
        *)
            echo "Usage: vpn [connect|disconnect|restart|status]"
            ;;
    esac
}

# Bash completion for vpn function
_vpn_completion() {
    local cur=${COMP_WORDS[COMP_CWORD]}
    local commands="connect disconnect restart status start stop"

    COMPREPLY=($(compgen -W "$commands" -- "$cur"))
}
complete -F _vpn_completion vpn

function create_laravel_app() {
    composer create-project laravel/laravel  $1
}
# Register the completion function

alias poc="bash /home/sotiris/Documents/projects/bash_scripts/download_from_poc.sh"
alias docker-export="bash ~/Documents/projects/bash_scripts/docker_mysql_export.sh"
alias docker-import="bash ~/Documents/projects/bash_scripts/docker_mysql_import.sh"
alias docker-create="bash ~/Documents/projects/bash_scripts/docker_mysql_create.sh"
alias ssh-report="ssh -i ~/.ssh/intraclear_report skastanas@52.209.41.2"
alias ssh-report-staging="ssh -i ~/.ssh/intraclear_report skastanas@52.209.56.22"
alias dstart=docker-start
alias drestart=docker-restart
alias dnames=dnames-fn
alias dps=dockerps
alias killer=kill-any
alias laravel_app=create_laravel_app
